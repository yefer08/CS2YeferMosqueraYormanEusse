/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package app.domain.services;

import app.Entities.MedicalHistoryEntity;
import app.domain.models.MedicalHistory;
import app.domain.models.Order;
import app.domain.models.Pet;
import app.domain.models.Veterinarian;
import app.exception.InvalidDataException;
import app.infrastructure.repositories.MedicalHistoryRepository;
import app.ports.Orderport;
import app.ports.PetPort;
import app.ports.Userport;
import app.ports.MedicalHistoryPort;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.UUID;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;


@Service
public class MedicalHistoryService {
    
    @Autowired
    private PetPort petPort;
    @Autowired
    private Orderport orderPort;
    @Autowired
    private MedicalHistoryPort medicalHistoryPort;
    @Autowired
    private Userport userport;
    
    private final MedicalHistoryRepository medicalHistoryRepository;
    
    public MedicalHistoryService(MedicalHistoryRepository medicalHistoryRepository) {
        this.medicalHistoryRepository = medicalHistoryRepository;
    }
 

    public void createMedicalHistory(
            LocalDateTime date, Veterinarian veterinarian, String reason, String symptoms,
            String diagnosis, String procedure, String medication, String medicationDose,
            String orderId, String vaccinationHistory, String allergies, String procedureDetails,
            Boolean canceled, String petId) {

        // üîπ Validar la existencia de la mascota
        Pet pet = petPort.findByidpet(petId);
        if (pet == null) {
            throw new InvalidDataException("‚ö†Ô∏è ID de mascota no encontrado");
        }

        // üîπ Validar la existencia del veterinario
        if (veterinarian == null || veterinarian.getId() == null) {
            throw new InvalidDataException("‚ö†Ô∏è Ingrese la informaci√≥n del veterinario.");
        }

        // üîπ Validar la existencia de la orden m√©dica
        Order order = orderPort.findByorderId(orderId);
        if (order == null || order.getId()== null) {
            throw new InvalidDataException("‚ö†Ô∏è Orden no encontrada");
        }

        // üîπ Validar que los campos obligatorios no est√©n vac√≠os
        if (reason == null || reason.trim().isEmpty()) {
            throw new InvalidDataException("‚ö†Ô∏è La raz√≥n de la consulta no puede estar vac√≠a.");
        }
        if (symptoms == null || symptoms.trim().isEmpty()) {
            throw new InvalidDataException("‚ö†Ô∏è Los s√≠ntomas no pueden estar vac√≠os.");
        }
        if (diagnosis == null || diagnosis.trim().isEmpty()) {
            throw new InvalidDataException("‚ö†Ô∏è El diagn√≥stico no puede estar vac√≠o.");
        }
        if (procedure == null || procedure.trim().isEmpty()) {
            throw new InvalidDataException("‚ö†Ô∏è El procedimiento no puede estar vac√≠o.");
        }

        // üîπ Crear la historia cl√≠nica
        MedicalHistory newHistory = new MedicalHistory(
                date, veterinarian, reason, symptoms, diagnosis, procedure,
                medication, medicationDose, order, vaccinationHistory, allergies, procedureDetails, canceled, pet
        );

        // üîπ Guardar la historia cl√≠nica
        medicalHistoryPort.save(newHistory);
        System.out.println("‚úÖ Historia cl√≠nica guardada exitosamente.");
    }
    
    public List<MedicalHistoryEntity> findAll() {
        return medicalHistoryRepository.findAll(); 
    }

    public List<MedicalHistoryEntity> findByPetId(String idpet) {
        return medicalHistoryRepository.findByPetId(idpet); // üîπ Llamada correcta al m√©todo del repositorio
    }
    

    public MedicalHistory findById(String id) {
        Optional<MedicalHistory> optionalHistory = (Optional<MedicalHistory>) medicalHistoryRepository.findById(id);
        if (optionalHistory.isPresent()) {
            return optionalHistory.get();
        } else {
            throw new RuntimeException("‚ö†Ô∏è Historia cl√≠nica no encontrada con ID: " + id);
        }

    }

    public void updateMedicalHistory(MedicalHistory history) {
        if (!medicalHistoryRepository.existsById(history.getId())) {
            throw new RuntimeException("‚ö†Ô∏è No se puede actualizar, la historia cl√≠nica no existe.");
        }
        medicalHistoryRepository.save(history);
        System.out.println("‚úÖ Historia cl√≠nica actualizada correctamente.");
    }

    public void deleteMedicalHistory(String historyId) {
        if (!medicalHistoryRepository.existsById(historyId)) {
            throw new RuntimeException("‚ö†Ô∏è No se puede eliminar, la historia cl√≠nica no existe.");
        }
        medicalHistoryRepository.deleteById(historyId);
        System.out.println("‚úÖ Historia cl√≠nica eliminada correctamente.");
    }
}

