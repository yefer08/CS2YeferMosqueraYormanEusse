package app.domain.services;

import app.Converted.PetConverter;
import app.Entities.PetEntity;
import app.Entities.UserEntity;
import app.domain.models.Owner;
import app.domain.models.Pet;
import app.exception.InvalidDataException;
import app.ports.PetPort;
import app.ports.Userport;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class PetService {

    @Autowired
    private Userport userport;

    @Autowired
    private PetPort petPort;

    public void registerPet(String namepet, long ownerId, int agepet, String idpet, String racepet,
            String caracteristic, float weight, String species) {

        // üîç Validaciones b√°sicas
        if (namepet == null || namepet.trim().isEmpty()) {
            throw new InvalidDataException("‚ö†Ô∏è El nombre de la mascota no puede estar vac√≠o.");
        }
        if (agepet <= 0 || agepet > 150) {
            throw new InvalidDataException("‚ö†Ô∏è La edad de la mascota debe estar entre 1 y 150 a√±os.");
        }
        if (racepet == null || racepet.trim().isEmpty()) {
            throw new InvalidDataException("‚ö†Ô∏è La raza de la mascota no debe estar vac√≠a.");
        }
        if (caracteristic == null || caracteristic.trim().isEmpty()) {
            throw new InvalidDataException("‚ö†Ô∏è Las caracter√≠sticas de la mascota no deben estar vac√≠as.");
        }
        if (weight <= 0 || weight > 200) {
            throw new InvalidDataException("‚ö†Ô∏è El peso de la mascota debe estar entre 0.1 y 200 kg.");
        }
        if (species == null || species.trim().isEmpty()) {
            throw new InvalidDataException("‚ö†Ô∏è La especie de la mascota no puede estar vac√≠a.");
        }

        // üß† Buscar Owner desde la base
        Owner owner = userport.findByid(ownerId);
        if (owner == null) {
            throw new InvalidDataException("‚ùå No se encontr√≥ un due√±o con el ID proporcionado.");
        }

        // üê∂ Crear el modelo de dominio (Pet)
        Pet pet = new Pet(
                namepet,
                owner,
                agepet,
                idpet,
                racepet,
                caracteristic,
                weight,
                species
        );

        // üèóÔ∏è Convertir a entidad sin el owner seteado a√∫n
        PetEntity petEntity = PetConverter.convertToPetEntity(pet);

        // üîÅ Buscar el UserEntity persistido (el due√±o real en la BD)
        UserEntity ownerEntity = userport.findEntityById(ownerId);
        if (ownerEntity == null) {
            throw new InvalidDataException("‚ùå No se encontr√≥ el UserEntity persistido.");
        }

        // üîó Asignar el owner persistido a la entidad
        petEntity.setOwner(ownerEntity);

    
        petPort.saveEntity(petEntity);

        System.out.println("‚úÖ Mascota registrada exitosamente.");
    }
}
